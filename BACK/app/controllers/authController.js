const Client = require('../models/client');
const crypto = require('crypto');
const consol = require('../services/colorConsole');
const AdminVerifEmail = require('../models/adminVerifEmail');
const {
    v4: uuid
} = require('uuid');


/**
 * Une m√©thode qui prend en charge la connexion d'un utilisateur d√©ja inscrit dans la BDD
 * Une m√©thode qui v√©rifit que l'utilisateur existe en BDD et compare son mot de passe avec son hash pr√©sent en BDD via bcrypt
 * Retourne un json
 * @name handleLoginForm
 * @method handleLoginForm
 * @property {string} email - l'email qu'un utilisateur utilise pour se connecter, doit √™tre unique en BDD et ins√©r√© dans le formulaire de connexion.
 * @property {string} password - le mot de passe qu'un utilisateur utilise pour se connecter.
 * @param {Express.Request} request - l'objet repr√©sentant la requ√™te
 * @param {Express.Response} response - l'objet repr√©sentant la r√©ponse
 * @return {String}  - Un token construit via la m√©thod sign du package jsonwebtoken
 * @return {boolean} - une valeur de connexion true ou false
 */
const authController = {

    login: async (request, response) => {

        try {

            if (request.session.user !== undefined && request.signedCookies.xsrfToken!== undefined && request.signedCookies.xsrfToken === request.headers['x-xsrf-token']) {
                return response.status(200).json({
                    message: "Vous vous √™tes d√©ja authentifi√© et vos informations de connection sont toujours valide.",
                    token: `${request.headers['x-xsrf-token']}`,
                });
            }

            const {
                email,
                password
            } = request.body;


            // On authentifie le user via son email et le password propos√©
            const clientInDb = await Client.authenticate(email, password);
            console.log(clientInDb);
            if (!clientInDb) {
                return response.status(404).json("Erreur d'authentification : l'email ou le mot de passe est incorrect ");
            }

            //le user existe et s'est correctement identifi√©, on stocke les infos qui vont bien dans la session
            request.session.user = {
                idClient: clientInDb.id,
                prenom: clientInDb.prenom,
                nomFamille: clientInDb.nomFamille,
                email: clientInDb.email,
                privilege: clientInDb.nom,
            };

            console.log("req.session ==>", request.session);


            //LocalStorage => sensible aux attaques XSS // faille Cross site Scripting ! injection du contenu dans une page web
            //Cookies => sensible aux attaques CSRF // Cross Site Request Forgery , faille qui consiste simplement √† faire ex√©cuter √† une victime une requ√™te HTTP √† son insu
            //Envoie token dans le body => localstorage 
            //Envoie token identique en cookie => navigateur. Quand le front passe ces deux informations au server, les deux tokens doivent matcher.


            /* On cr√©er le token CSRF qui partira avec le body */
            const xsrfToken = crypto.randomBytes(70).toString('hex');

            // On cr√©er le cookie contenant token CSRF. On comparera les deux au retour.
            //sameSite: strict  => Le cookie concern√© par cette instruction ne sera envoy√© que si la requ√™te provient du m√™me site web
            response.status(201).cookie('xsrfToken', xsrfToken, {
                httpOnly: true, // Garantit que le cookie n‚Äôest envoy√© que sur HTTP(S), pas au JavaScript du client, ce qui renforce la protection contre les attaques de type cross-site scripting.
                secure: true, // si true, la navigateur n'envoit que des cookie sur du HTTPS
                sameSite: 'strict', //le mode Strict emp√™che l‚Äôenvoi d‚Äôun cookie de session dans le cas d‚Äôun acc√®s au site via un lien externe//https://blog.dareboost.com/fr/2017/06/securisation-cookies-attribut-samesite/
                signed: true, // on devra utiliser req.signedCookies au retour ! 
                expires: new Date(Date.now() + 10 * 3600000), // par d√©fault une expiratione 10h apr√®s
            });


            /**
             * Si l'utilisateur a coch√© la case 'se souvenir de moi, on ajoute 7 jours de validit√© √† sa session
             * il peut ainsi quitter son navigateur et revenir sur la page, il devrait rester connect√©
             * on indique en date d'expiration la date courante + une heure (en millisecondes)
             */
            if (request.body.remember) {
                request.session.cookie.expires = new Date(Date.now() + 7 * 24 * 3600000); //je rajoute 7 jours de validit√©.
            }


            // un petit rappel de passage ...

            if (clientInDb.nom === 'Administrateur' || clientInDb.nom === 'Developpeur') {

                const adminInDbEmail = await AdminVerifEmail.findByIdClient(clientInDb.id);


                if (adminInDbEmail === null || adminInDbEmail.verifEmail === false) {

                    response.status(200).json({
                        xsrfToken: xsrfToken,
                        id: clientInDb.id,
                        prenom: clientInDb.prenom,
                        nomFamille: clientInDb.nomFamille,
                        email: clientInDb.emailAddress,
                        privilege: clientInDb.nom,
                        message: "Bonjour h√î v√©n√©rable Administrateur ! Merci de faire v√©rifier votre email üòâ "
                    });

                    return;

                }
            };

            // On envoie une reponse JSON concernant les infos du user avec le token a compar√© avec celui dans le cookie.
            response.status(200).json({
                xsrfToken: xsrfToken,
                id: clientInDb.id,
                prenom: clientInDb.prenom,
                nomFamille: clientInDb.nomFamille,
                email: clientInDb.emailAddress,
                privilege: clientInDb.nom,
            });


            console.log(`L'utilisateur ${clientInDb.prenom} ${clientInDb.nomFamille} a bien √©t√© authentifi√©.`);


        } catch (error) {
            console.trace('Erreur dans la m√©thode login du authController :',
                error);

            response.status(500).json(error.message);
        }

    },

    deconnexion: async (req, res) => {
        try {



            console.log("req.session a l'entr√©e de la d√©connexion ==> ", req.session);

            //je change a false la valeur du headers
            //res.append('x-xsrf-token', 'false');
            //je d√©truis la session
            req.session.destroy(); // je supprime ma session => apr√©s v√©rif √ßa supprime bien la cl√© dans REDIS !
            //je supprime le cookie qui contient une patie de l'information pour s'authentifier (le token contre les XSS)
            res.cookie('xsrfToken', "", { //ou res.clearCookie  => La doc stipule que le cookie sera supprim√© par le client seulement si les options donn√©es sont √©quivalent a ceux donn√©es lors de sa cr√©ation. Je redonne donc les options de cookie (excluding expires and maxAge.).
                path: '/',
                httpOnly: true, //doc => https://expressjs.com/en/api.html#res.sendStatus
                secure: true,
                sameSite: 'strict',
                signed: true,
            })

            console.log("client d√©connect√© ! valeur de req.session maintenant ==> ", req.session)

            return res.status(200).json("L'utilisateur a √©t√© d√©connect√© avec succ√©s");

        } catch (error) {
            console.trace(
                'Erreur dans la m√©thode deconnexion du authController :',
                error);
            res.status(500).json(error.message);
        }

    },

    cookie: async (req, res) => {
        try {
            //Si cette route est contact√©e, le user a accept√© les cookies, je stocke sur son navigateur un cokie qui contient cette information
            //on r√©cup√©re l'info d'une chekbox, bouton radio, 
            if (req.signedCookies.cookieAccepted) {
                return res.json("Vous avez accept√© notre politique d'utilisation des cookies sur ce site et nous vous en remer√ßiont !");
            }

            if (req.body.cookieAccepted === 'true') {
                res.status(200).cookie('cookieAccepted', true, {
                    httpOnly: true, // Garantit que le cookie n‚Äôest envoy√© que sur HTTP(S), pas au JavaScript du client, ce qui renforce la protection contre les attaques de type cross-site scripting.
                    secure: true, // si true, la navigateur n'envoit que des cookie sur du HTTPS
                    //sameSite: 'strict', //le mode Strict emp√™che l‚Äôenvoi d‚Äôun cookie de session dans le cas d‚Äôun acc√®s au site via un lien externe//https://blog.dareboost.com/fr/2017/06/securisation-cookies-attribut-samesite/
                    signed: true, // on devra utiliser req.signedCookies au retour ! 
                    expires: new Date(Date.now() + 24 * 3600000 * 180), // par d√©fault une expiration apr√©s 180 jours
                }).json("Vous avez accept√© notre politique d'utilisation des cookies sur ce site et nous vous en remer√ßiont !");


                req.session.cookie = 'accepted';
            }
            console.log()
            return res.json("Merci d\'acc√©pter la politique de cookie pour continuer d\'utiliser ce site");


        } catch (error) {
            console.trace(
                'Erreur dans la m√©thode cookie du authController :',
                error);
            res.status(500).json(error.message);
        }

    },




}

module.exports = authController;